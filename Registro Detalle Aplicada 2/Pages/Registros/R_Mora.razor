@page "/Moras"
@page "/Moras/{MoraId:int}"

@using Registro_Detalle_Aplicada_2.Models
@using Registro_Detalle_Aplicada_2.BLL
@inject IToastService toast;

<EditForm Model="moras" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="card">
        <div class="card-header">
            <h1>Registro de Moras</h1>
        </div>

        <div class="card-body">
            <form>
                <div class="form-row align-items-center">
                    @*MontoId*@
                    <div class="col">
                        <div class="form-group">
                            <label>MoraId</label>
                            <div class="input-group">

                                <InputNumber @bind-Value="moras.MoraId" class="form-control col-4" />
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-info input-group-text oi oi-magnifying-glass" @onclick="Buscar"> Buscar</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                @*Fecha*@
                <div class="form-group">
                    <label>Fecha</label>
                    <InputDate @bind-Value="moras.Fecha" class="form-control" />
                    <ValidationMessage For="@(() => moras.Fecha)" />
                </div>

                <div class="form-group">
                    <div class="form-row">
                        <div class="col">
                            <label>PrestamoID:</label>
                            <select class="form-control" @bind="prestamoSeleccionado" @onclick="MostrarNombrePersona">
                                @foreach (var item in ListaPrestamo)
                                {
                                    <option value="@item.PrestamoId">@item.PrestamoId</option>
                                 }
                            </select>
                        </div>

                        <div class="col">
                            <label>A Nombre:</label>
                            <InputText class="form-control" readonly="true" @bind-Value="nombrePersona" />
                        </div>

                        <div class="col">
                            <label>Valor</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="valorColocado" class="form-control" />
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-secondary" @onclick="AgregarMora">Agregar</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="table-responsive text-nowrap" style="position: relative; height:180px; overflow: auto; display: block;">
                    <table class="table table-striped">
                        <thead class="thead-light">
                            <tr>
                                <th>Id</th>
                                <th>MoraId</th>
                                <th>PrestamoId</th>
                                <th>Monto</th>
                            </tr>
                        </thead>
                        @*Tabla de Datos*@
                        <tbody class="bg-white">
                            @foreach (var item in moras.MoraDetalle)
                             {
                                <tr>
                                    <td>@item.MoraDetalleId</td>
                                    <td>@item.MoraId</td>
                                    <td>@item.PrestamoId</td>
                                    <td>@item.Valor</td>
                                    <td><button type="button" class="btn btn-lg btn-danger oi oi-minus" @onclick="(() => Remover(item))"> Remover</button></td>
                                </tr>
                             }
                        </tbody>
                    </table>
                </div>

                @*Total*@
                <div class="form-group">
                    <label>TOTAL:</label>
                    <InputNumber @bind-Value="moras.Total" class="form-control" readonly="true" />
                    <ValidationMessage For="@(() => moras.Total)" />
                </div>
            </form>
        </div>

        <div class="card-footer">
            <div class="form-group text-center" display: inline-block>
                <button type="button" class="btn btn-lg btn-primary oi oi-check" @onclick="Nuevo"> Nuevo</button>
                <button type="submit" class="btn btn-lg btn-success oi oi-cloud-upload"> Guardar</button>
                <button type="button" class="btn btn-lg btn-danger oi oi-trash" @onclick="Eliminar"> Eliminar</button>
            </div>
        </div>
    </div>
</EditForm>

@code
{ 

    [Parameter]
    public int MoraId { get; set; }

    public int prestamoSeleccionado { get; set; }
    public decimal valorColocado { get; set; }
    public string nombrePersona { get; set; }

    private Mora moras = new Mora();
    private List<Prestamo> ListaPrestamo = new List<Prestamo>();

    protected override void OnInitialized()
    {
        Nuevo();

        if (MoraId > 0)
        {
            var Mora = MoraBLL.Buscar(MoraId);
            if (Mora != null)
                this.moras = Mora;
            else
                toast.ShowWarning("No encontrado.");
        }

        ListaPrestamo = PrestamoBLL.GetList(p => true);
    }

    private void Nuevo()
    {
        this.moras = new Mora();
        prestamoSeleccionado = 0;
        valorColocado = 0;
        nombrePersona = string.Empty;
    }
    private void MostrarNombrePersona()
    {
        string auxNombre = string.Empty;

        var auxPrestamo = PrestamoBLL.Buscar(prestamoSeleccionado);
        if (auxPrestamo != null)
        {
            auxNombre = PersonaBLL.Buscar(auxPrestamo.PersonaId).Nombre;
            nombrePersona = auxNombre;
        }
    }

    private void Buscar()
    {
        if (moras.MoraId > 0)
        {
            var encontrado = MoraBLL.Buscar(moras.MoraId);

            if (encontrado != null)
                moras = encontrado;
            else
                toast.ShowWarning("No encontrado");
        }
    }

    private void CalcularTotal()
    {
        decimal total = 0;

        foreach (var item in moras.MoraDetalle)
        {
            total += item.Valor;
        }
        moras.Total = total;
    }

    private void AgregarMora()
    {
        if (prestamoSeleccionado == 0)
        {
            toast.ShowWarning("Tiene que seleccionar un prestamoId");
            return;
        }

        if (valorColocado <= 0)
        {
            toast.ShowWarning("El Monto debe ser mayor a 0.");
            return;
        }
        else
        {
            this.moras.MoraDetalle.Add(new MorasDetalle
            {
                MoraId = moras.MoraId,
                PrestamoId = prestamoSeleccionado,
                Valor = valorColocado
            });

            prestamoSeleccionado = 0;
            valorColocado = 0;
        }
        CalcularTotal();
    }

    private void Remover(MorasDetalle Detalle)
    {
        try
        {
            moras.MoraDetalle.Remove(Detalle);
            CalcularTotal();
        }
        catch (Exception)
        {
            throw;
        }
    }

    private void Guardar()
    {
        bool guardo = false;

        if (moras.MoraDetalle.Count == 0)
        {
            toast.ShowWarning("Tienes que agregar al menos un elemento a la lista");
            return;
        }
        else
        {
            guardo = MoraBLL.Guardar(moras);

            if (guardo)
            {
                Nuevo();
                toast.ShowSuccess("Guardo Correctamente");
            }
            else
                toast.ShowError("No fue posible guardar");
        }
    }

    private void Eliminar()
    {
        bool elimino;

        elimino = MoraBLL.Eliminar(moras.MoraId);

        if (elimino)
        {
            Nuevo();
            toast.ShowSuccess("Eliminado correctamente");
        }
        else
            toast.ShowError("No fue posible eliminar");
    }
 }